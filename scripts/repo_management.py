from colorama import init, Fore
import git
import git_utils, github_utils, gitlab_utils, utils, prompts, config
import os

init(autoreset=True, convert=True)

def set_visibility():
    visibility_prompt = input(Fore.CYAN + 'Enter the repo visibility: (public/private)').lower()
    if visibility_prompt in ["", "public", "pub"]:
        return 'public'
    elif visibility_prompt in ["private", "pri"]:
        return 'private'
    else:
        print(Fore.RED + f'[ERROR] {visibility_prompt} is not a valid option')
        return 'public'

def create_container(container_path_config):
    if os.path.exists(container_path_config):
        if not utils.check_container_data(container_path_config):
            gl_url, gl_username, gl_token = prompts.load_gitlab_vars()
            gh_url, gh_url_general, gh_url_remove, gh_username, gh_token = prompts.load_github_vars()
            config.add_data_to_config('EMAIL', utils.get_gitConfig("user.email"), container_path_config)
            config.add_data_to_config('GL_USERNAME', gl_username, container_path_config)
            config.add_data_to_config('GL_TOKEN', gl_token, container_path_config)
            config.add_data_to_config('GL_URL', gl_url, container_path_config)
            config.add_data_to_config('GH_USERNAME', gh_username, container_path_config)
            config.add_data_to_config('GH_TOKEN', gh_token, container_path_config)
            config.add_data_to_config('GH_URL', gh_url, container_path_config)
            config.add_data_to_config('GH_URL_GENERAL', gh_url_general, container_path_config)
            config.add_data_to_config('GH_URL_REMOVE', gh_url_remove, container_path_config)
            print(Fore.GREEN + f'[SUCCESS] {container_path_config} saved successfully')
    else:
        print(Fore.RED + '[ERROR] config file not found')

def create_local(container_path, repo_name):
    local_path = git_utils.create_path(container_path, repo_name)
    git_utils.create_local_repo(local_path)
    local_path_config = git_utils.create_path(local_path, ".config.json")
    config.create_config_file(local_path_config)
    config.add_data_to_config('LOCAL_PATH', local_path, local_path_config)
    config.add_data_to_config('LOCAL_PATH_CONFIG', local_path_config, local_path_config)

def createReadme(local_path, local_path_config, repo_name):
    try:
        readme_path = os.path.join(local_path, 'README.md')
        config.add_data_to_config('README_PATH', readme_path, local_path_config)
        with open(readme_path, 'w') as data_file:
            data_file.write('# ' + repo_name.upper())
        print(Fore.GREEN + f'[SUCCESS - README CREATED] {readme_path} created successfully')
        return readme_path
    except IOError as e:
        print(Fore.RED + f'[ERROR] {e}')

def createGitIgnore(local_path, local_path_config, repo_name):
    try:
        gitignore_path = os.path.join(local_path, '.gitignore')
        config.add_data_to_config('GITIGNORE_PATH', gitignore_path, local_path_config)
        with open(gitignore_path, 'w') as data_file:
            data_file.write('**/.config*\n')
            data_file.write('**/.config.json\n')
        print(Fore.GREEN + f'[SUCCESS - GITIGNORE CREATED] {gitignore_path} created successfully')
        return gitignore_path
    except IOError as e:
        print(Fore.RED + f'[ERROR] {e}')

def gitCommit(local_path, readme_path):
    commitMessage = "[COMMIT AUTO GENERATED BY GITREPOS]"
    try:
        repo = git.Repo(local_path)
        repo.index.add(readme_path)
        repo.index.commit(commitMessage)
        print(Fore.GREEN + f'[SUCCESS - README COMMITED] {readme_path} committed successfully')
    except Exception as e:
        print(Fore.RED + f'[ERROR] GIT COMMIT Failed to perform Git operation {e}')

def push_with_upstream(gitlab_repo, default_branch, gl_repo_url):
    origin = gitlab_repo.create_remote('origin', gl_repo_url)
    try:
        origin.push(refspec=f"{default_branch}:{default_branch}", set_upstream=True)
        print(Fore.GREEN + f"[SUCCESS] Push with upstream {default_branch}")
    except git.exc.GitCommandError as e:
        print(Fore.RED + f"[ERROR] Git push failed: {e}")

def set_up_gitlab_github_mirror(gitlab_repo, local_path_config):
    try:
        local_config_data = config.open_config_data(local_path_config)
        gl_repo_url = local_config_data['GL_REPO_URL']
        gh_repo_url = local_config_data['GH_REPO_URL']
        gh_token = local_config_data['GH_TOKEN']
        gitlab_repo.create_remote('github', gh_repo_url)
        gitlab_repo.git.remote('set-url', '--push', 'github', gh_repo_url)
        gitlab_repo.git.remote('set-url', '--push', '--add', 'github', gl_repo_url)
        default_branch = gitlab_repo.active_branch.name
        gitlab_repo.remotes.origin.pull(default_branch)
        gitlab_repo.git.push('--all', 'github', **{'o': f'oauth2accesstoken:{gh_token}'})
        print(Fore.GREEN + f'[SUCCESS] {gh_repo_url} set up successfully')
    except Exception as e:
        print(Fore.RED + f'[ERROR] while setting up mirror {e}')

def create_gitlab(container_path, container_path_config, repo_name):
    local_path = git_utils.create_path(container_path, repo_name)
    local_path_config = git_utils.create_path(local_path, ".config.json")
    visibility = set_visibility()
    config.add_data_to_config('GL_VISIBILITY', visibility, local_path_config)
    gitlab_utils.create_gitlab_repo(container_path_config, repo_name, local_path_config, visibility)

def create_github(container_path, container_path_config, repo_name):
    local_path = git_utils.create_path(container_path, repo_name)
    local_path_config = git_utils.create_path(local_path, ".config.json")
    gh_token = config.open_config_data(container_path_config)['GH_TOKEN']
    gh_username = config.open_config_data(container_path_config)['GH_USERNAME']
    gh_url = config.open_config_data(container_path_config)['GH_URL']
    gh_url_general = config.open_config_data(container_path_config)['GH_URL_GENERAL']
    gh_url_remove = config.open_config_data(container_path_config)['GH_URL_REMOVE']

    visibility = set_visibility()
    config.add_data_to_config('GH_VISIBILITY', visibility, local_path_config)

    github_utils.create_github_repo(gh_url_remove, gh_url, gh_url_general, gh_token, gh_username, repo_name, visibility, local_path_config)

def init_repo(container_path, repo_name):
    local_path = git_utils.create_path(container_path, repo_name)
    local_path_config = git_utils.create_path(local_path, ".config.json")
    gl_repo_url = config.open_config_data(local_path_config)['GL_REPO_URL']
    gitlab_repo = git.Repo.init(local_path)
    default_branch = gitlab_repo.active_branch.name
    config.add_data_to_config('DEFAULT_BRANCH', default_branch, local_path_config)
    createGitIgnore(local_path, local_path_config, repo_name)
    readme_path = createReadme(local_path, local_path_config, repo_name)
    gitCommit(local_path, readme_path)
    push_with_upstream(gitlab_repo, default_branch, gl_repo_url)
    set_up_gitlab_github_mirror(gitlab_repo, local_path_config)

if __name__ == '__main__':
    print(Fore.CYAN + 'Running repo_management...')
    main_prompt = input(Fore.CYAN + 'Do you want to remove or create a new repo? r/c: ').lower()

    repo_name = prompts.prompt_repo_name()
    container_path, container_path_config = config.load_container_vars()

    if main_prompt == 'c':
        create_container(container_path_config)
        create_local(container_path, repo_name)
        create_gitlab(container_path, container_path_config, repo_name)
        create_github(container_path, container_path_config, repo_name)
        init_repo(container_path, repo_name)
        print(Fore.GREEN + '[SUCCESS] Repository created successfully!')
    elif main_prompt == 'r':
        remove_prompt = input('Are you sure you want to delete the repository? y/n: ').lower()
        if remove_prompt == "y":
            github_utils.remove_github(repo_name, container_path, container_path_config)
            gitlab_utils.remove_gitlab(container_path, container_path_config, repo_name)
            git_utils.remove_local(container_path, repo_name)
            print(Fore.GREEN + '[SUCCESS] Repository removed successfully!')
        else:
            print(Fore.RED + '[INFO] Operation cancelled.')
    else:
        print(Fore.RED + '[ERROR] Wrong option selected.')
